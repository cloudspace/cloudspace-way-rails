%section
  %h2 Sales Process

  %h3 Quality Results
  %p
    We assign two software engineers who together will stay entirely focused on your project.
    For long-term projects, we rotate pairs at select times during the project by replacing
    one of the engineers in each team. By rotating engineers, we give you access to a larger
    team with direct product and code knowledge, while only charging for the ones actively coding.
    This helps you if we need to add engineers because of your business needs; we avoid the dip
    in productivity that normally comes from adding people to a project. This translates into better
    results, more innovation and faster completion of your project. In the end, if there is a handoff
    to your internal team, we'll give them the support they need to make a smooth transition.
  %p
    Every Cloudspace engineer understands and implements a pragmatic approach using Agile and Lean,
    and pair it with the experience of having delivered hundreds of quality projects.

  %h3 Non-Disclosure Agreements
  %p
    A non-disclosure agreement (NDA), also known as a confidentiality agreement (CA),
    is a legal contract between parties to outline confidential material, knowledge,
    or information that the parties wish to share with one another for certain purposes.
    It is a contract through which the parties agree not to disclose information covered by the agreement.
  %p
    Yeah, we do them.

  %h3 Service Level Agreements
  %p
    A service-level agreement (SLA) is a part of a service contract where a service is formally defined.
    Particular aspects of the service - scope, quality, responsibilities - are agreed between the
    service provider and the service user.
  %p
    Yeah, these are good to have.

  %h3 Sales Engineer Meeting
  %p
    In the Sales Engineer Meeting the client, the Cloudspace Sales and the Cloudspace developers meet
    to understand and vet the product vision. This allows the client and Cloudspace to begin working
    as a team before officially working together to determine if “this is a great match of product needs and talent”.

  %h3 Providing Project Estimates
  %p
    When providing estimates, an approach that makes a lot of sense and what we practice is
    incremental funding. With incremental funding we don’t ask for the whole bag of money upfront.
    Only enough to spike through enough of the work, to report back a better number on how long it is going to take.
  %p
    Let us build something to see how long that takes This can go a long ways to reducing the variance
    in that upfront number.
  %p
    At Cloudspace we like to make solid and detailed estimates that we really can stand behind.
    A good estimate often requires research and planning.
  %p
    The primary purpose of software estimation is not to predict a project’s outcome;
    it is to determine whether a project’s targets are realistic enough to allow the project
    to be controlled to meet them. --Steve McConnell
  %p
    Some key reasons for our due diligence is that no two projects have:
  %ol
    %li The same requirements
    %li The same people
    %li The same business context
    %li The same technology
    %li The same priorities and constraints
    %li In order to provide the most reliable estimates, we like to have the following information (if applicable):

  %h4 Application Specifications
  %p
    First and foremost when working on an app an understanding of what is desired for the app to do is needed.
    To help facilitate estimating work, any specifications, design guidelines, workflows, etc are desired.
    In addition, platform requirements, where will the application be deployed/hosted, etc will factor
    in to the time required. Also, estimated user bases, scalability and SLA requirements can be useful
    in determining time.
  %h4 User Documentation
  %p
    End-user documentation can be pivotal to understanding how complex applications should be used.
    Having a solid grasp of how the application functions from a consumer-standpoint can greatly help with estimates.
  %h4 Third Party and API Documentation
  %p
    When building an app that interfaces with a local or third party API, it’s great to know ahead of time
    what that API looks like to get a solid idea of how we’ll need to interface with it and figure out what
    tools we can leverage to implement these interfaces quickly and reliably.
  %h4 Existing Source Code
  %p
    Existing source code can often act as a guide to developing future features/projects.
    Seeing the overall design, organization, potential pitfalls, implementation specifics, etc ahead of
    time is very beneficial to determining the scope of each new feature. When implementing code for a
    new platform, such as in an app porting project, seeing the existing code allows for us to make much
    more specific and complete estimates. Having a reference to an already complete implementation ensures
    that all features are covered, no matter how small or specific (for instance, certain features may only
    show up to a user under special conditions but are immediately visible from the source code).
  %h4 Development Tools and Process Information
  %p
    Knowledge of any existing development tools, version control systems, languages, frameworks, etc
    helps greatly in determining the work required.
  %h4 What Else?
  %p
    There are three simple truths with providing estimates:
  %ol
    %li It is impossible to gather all the requirements at the beginning of a project.
    %li Whatever requirements you do gather are guaranteed to change.
    %li Three will always be more to do than time and money will allow.
