%section
  %h2 Project Estimation Process

  %h3 Establish Estimate Scope
  %p
    Define and document estimate expectations. When all participants understand the scope and purpose
    of the estimate, you’ll not only have a baseline against which to gauge the effect of future changes;
    you’ll also head off misunderstandings among the project group and clear up contradictory assumptions
    about what is expected. An estimate should be considered a living document; as data changes or new
    information becomes available, it should be documented and factored into the estimate in order to
    maintain the project’s integrity.

  %h3 Establish technical baseline, ground rules, and assumptions
  %p
    To Establish a reasonable technical baseline, you must first identify the functionality included in the estimate.
    If detailed functionality is not known, ground rules and assumptions should clearly state what is and isn’t
    included in the estimate. Issues of COTS, reuse, and other assumptions should be documented as well.
    Ground rules and assumptions form the foundation of the estimate and, although in the early stages of the
    estimate they are preliminary and therefore rife with uncertainty, they must be credible and documented.
    Review and redefine these assumptions regularly as the estimate moves forward.

  %h3 Collect Data
  %p
    Any estimate, by definition, encompasses a range of uncertainty, so you should express estimate inputs as least,
    likely and most rather than characterizing them as single data points. Using ranges for inputs permits the
    development of a viable initial estimate even before you have defined fully the scope of the system you are
    estimating. Certain core information must be obtained in order to ensure a consistent estimate. Not all data
    will come from one source and it will not all be available at the same time, so a comprehensive data collection
    form will aid your efforts. As new information is collected, you will already have an organized and thorough
    system for documenting it.

  %h3 Size Software (Return to step 3 based on findings)
  %p
    If you lack the time to complete all the activities described in the ten-step process, prioritize the estimation
    effort: Spend the bulk of the time available on sizing (sizing databases and tools can help save time in this
    process). Size is generally the most significant (but certainly not the only) cost and schedule driver.
    Overall scope of a software project is defined by identifying not only the amount of new software that must
    be developed, but also must include the amount of preexisting, COTS, and other software that will be integrated
    into the new system. In addition to estimating product size, you will need to estimate any rework that will be
    required to develop the product, which will generally be expressed as Agile Story Points, although there are other
    possible units of measure. To help establish the overall uncertainty, the size estimate should be expressed as
    a least—likely—most range.

  %h3 Prepare Baseline Estimates
  %p
    ￼￼Budget and schedule are derived from estimates, so if an estimate is not accurate, the resulting schedules and
    budgets will be inaccurate also. Given the importance of the estimation task, developers who want to improve
    their software estimation skills should understand and embrace some basic practices. First, trained, experienced,
    and skilled people should be assigned to size the software and prepare the estimates. Second, it is critically
    important that they be given the proper technology and tools. And third, the project manager must define and
    implement a mature, documented, and repeatable estimation process. To prepare the baseline estimate there are
    various approaches that can be used, including guessing (which is not recommended), using existing productivity
    data exclusively (also not recommended), the bottom-up approach, expert judgment, and cost models.

  %h3 Quantify Risk & Risk Assessment
  %p
    The best managers of software projects seem to have an uncanny ability to anticipate what can happen to their
    projects and devise just-in-time mitigation approaches to avoid the full impacts of the problems. In reality,
    this ability is simply the skillful application of well known risk management techniques to the well known
    problems of software management. Before we explore the risk management process and how to apply it to the risks
    associated with sizing and estimation, it is important to understand what a risk is and that a risk, in itself,
    does not necessarily pose a threat to a software project if it is recognized and addressed before it becomes a
    problem. Many events occur during software development. Risk is characterized by a loss of time, or quality,
    money, control, understanding, and so on. The loss associated with a risk is called the risk impact. We must have
    some idea of the probability that the event will occur. The likelihood of the risk, measured from 0 (impossible)
    to 1 (certainty) is called the risk probability. When the risk probability is 1, then the risk is called a problem,
    since it is certain to happen. For each risk, we must determine what we can do to minimize or avoid the impact of
    the event. Risk control involves a set of actions taken to reduce or eliminate a risk. Risk management enables
    you to identify and address potential threats to a project, whether they result from internal issues or conditions
    or from external factors that you may not be able to control. Problems associated with sizing and estimating software
    potentially can have dramatic negative effects. The key word here is potentially, which means that if problems can
    be foreseen and their causes acted upon in time, effects can be mitigated. The risk management process is the means
    of doing so. Many managers incorrectly perceive that if they identify risks that subsequently become problems they
    will be held responsible for the problems. In fact, the opposite is true. By using risk management techniques to
    anticipate potential risks, the manager is protected against liability because if the problem does occur, it can
    be demonstrated that the cause was beyond what any prudent manager could have foreseen. Although cost, schedule,
    and product performance risks are interrelated, they can also be analyzed independently. In practice, risks must
    be identified as specific instances in order to be manageable. Statistical risk/uncertainty analysis should be a
    part of your schedule and effort estimation process.

  %h3 Review Verify and Validate Estimates
  %p
    ￼￼At this point in the process, your estimate should already be reasonable. It is still important to
    validate your methods and your results, which is simply a systematic confirmation of the integrity
    of an estimate. By validating the estimate, you can be more confident that your data is sound, your
    methods are effective, your results are accurate, and your focus is properly directed. There are
    many ways to validate an estimate. Both the process used to build the estimate and the estimate itself
    must be evaluated. Ideally, the validation should be performed by someone who was not involved in
    generating the estimate itself, who can view it objectively. The analyst validating an estimate should
    employ different methods, tools and separately collected data than were used in the estimate under review.
    When reviewing an estimate you must assess the assumptions made during the estimation process. Make sure
    that the adopted ground rules are consistently applied throughout the estimate. Below-the-line costs and
    the risk associated with extraordinary requirements may have been underestimated or overlooked, while
    productivity estimates may have been overstated. The slippery slope of requirements creep may have created
    more uncertainty than was accounted for in the original estimate. A rigorous validation process will
    expose faulty assumptions, unreliable data and estimator bias, providing a clearer understanding of the
    risks inherent in your projections. Having isolated problems at their source, you can take steps to
    contain the risks associated with them, and you will have a more realistic picture of what your project
    will actually require to succeed. Despite the costs of performing one, a formal validation should be
    scheduled into every estimation project, before the estimate is used to establish budgets or constraints
    on your project process or product engineering. Failing to do so may result in much greater downstream costs,
    or even a failed project.

  %h3 Generate a Project Plan
  %p
    The process of generating a project plan includes taking the estimate and allocating the cost and
    schedule to a function and task-oriented work breakdown structure. To avoid tomorrow’s catastrophes,
    a software manager must confront today’s challenges. A good software manager must possess a broad
    range of technical software development experience and domain knowledge, and must be able to manage
    people and the unique dynamics of a team environment, recognize project and staff dysfunction, and
    lead so as to achieve the expected or essential result. Some managers, mainly due to lack of experience,
    are not able to evaluate what effects their decisions will have over the long run. They either lack
    necessary information, or incorrectly believe that if they take the time to develop that information
    the project will suffer as a result. Other managers make decisions based on what they think higher
    management wants to hear. This is a significant mistake. A good software manager will understand what
    a project can realistically achieve, even if it is not what higher management wants. His job is to
    explain the reality in language his managers can understand. Both types of “problem manager,” although
    they may mean well, either lead a project to an unintended conclusion or, worse, drift down the road
    to disaster. Software management and planning problems have been recognized for decades as the leading
    causes of software project failures. In addition to the types of management choices discussed above,
    three other issues contribute to project failure: bad management decisions, incorrect focus, and destructive
    politics. Models such as SEER-SEM handle these issues by guiding you in making appropriate changes
    in the environment related to people, process, and products. ￼

  %h3 Document Estimate & Lessons Learned
  %p
    Each time you complete an estimate and again at the end of the software development, you should document
    the pertinent information that constitutes the estimate and record the lessons you learned. By doing so,
    you will have evidence that your process was valid and that you generated the estimate in good faith, and
    you will have actual results with which to substantiate or calibrate your estimation models. Be sure to
    document any missing or incomplete information and the risks, issues, and problems that the process
    addressed and any complications that arose. Also document all the key decisions made during the conduct
    of the estimate and their results and the effects of the actions you took. Finally, describe and document
    the dynamics that occurred during the process, such as the interactions of your estimation team, the
    interfaces with your clients, and trade-offs you had to make to address issues identified during the
    process. You should conduct a lessons-learned session as soon as possible after the completion of a
    project while the participants’ memories are still fresh. Lessons-learned sessions can range from two
    team members meeting to reach a consensus about the various issues that went into the estimation process
    to highly structured meetings conducted by external facilitators who employ formal questionnaires.
    No matter what form it may take, it is always better to hold a lessons- learned meeting than not, even
    if the meeting is a burden on those involved. Every software project should be used as an opportunity to
    improve the estimating process.

  %h3 Track Project Throughout Development
  %p
    Estimating software size, cost, and schedule should be an ongoing process.
    Preliminary estimates may be required to bid a job or to initiate the development process,
    or you may need to conduct a cost/benefit or return-on-investment (ROI) analysis to evaluate
    a project’s feasibility. Preliminary estimates are the hardest to develop because of the
    incomplete nature of the information available and the other factors discussed. You can
    improve the accuracy of a preliminary estimate by using the sizing methodology identified
    in Step 4 or by using two different estimation techniques and having your analysts normalize
    the differences. Once a project has started, you should use the estimates as a basis for
    performance measurement and project control. Throughout the conduct of the project you will
    need to monitor the actual effort and duration of tasks and/or phases against planned values
    to ensure you have the project under control.
